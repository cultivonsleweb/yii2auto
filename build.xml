<?xml version="1.0" encoding="UTF-8"?>
<project name="Yii2Auto" default="build" basedir=".">
    
    <property file="phingyii2/build.properties" />
    
    <target name="ext">
        <echo msg="install and update extension start"></echo>
        <phing phingfile="${basedir}/phingyii2/ext.xml" inheritAll="true" inheritRefs="true" target="run">
            <property name="basedir" value="${basedir}" />
        </phing>
        <echo msg="install and update extension finish"></echo>
    </target>

    <target name="prepare">
	    	<if>
			<equals arg1="basic" arg2="${yii2.template}" />
			<then>
				<property name="runtime" value="${basedir}/runtime" />
			</then>
			<else>
				<property name="runtime" value="${basedir}/console/runtime" />

			</else>
		</if>
	    <echo msg="Delete directory ./backent, ./common, ./console, ./environments, ./frontend, ./tests, ./tmp" />
	    <delete dir="assets" includeemptydirs="true" failonerror="false" verbose="true"></delete>
	    <delete dir="backend" includeemptydirs="true" failonerror="false" verbose="true"></delete>
	    <delete dir="commands" includeemptydirs="true" failonerror="false" verbose="true"></delete>
	    <delete dir="common" includeemptydirs="true" failonerror="false" verbose="true"></delete>
	    <delete dir="controllers" includeemptydirs="true" failonerror="false" verbose="true"></delete>
        <delete dir="console" includeemptydirs="true" failonerror="false" verbose="true"></delete>
	<delete dir="config" includeemptydirs="true" failonerror="false" verbose="true"></delete>
	<delete dir="environments" includeemptydirs="true" failonerror="false" verbose="true"></delete>
	<delete dir="frontend" includeemptydirs="true" failonerror="false" verbose="true"></delete>
	<delete dir="mail" includeemptydirs="true" failonerror="false" verbose="true"></delete>
	<delete dir="models" includeemptydirs="true" failonerror="false" verbose="true"></delete>
        <delete dir="tests" includeemptydirs="true" failonerror="false" verbose="true"></delete>
	<delete dir="tmp" includeemptydirs="true" failonerror="false" verbose="true"></delete>
	<delete dir="views" includeemptydirs="true" failonerror="false" verbose="true"></delete>
	<delete dir="web" includeemptydirs="true" failonerror="false" verbose="true"></delete>
        <delete>
            <fileset dir="." casesensitive="false" >
                <exclude name="build.xml" />
                <exclude name="phingyii2" />
                <exclude name="phingyii2/ext.xml" />
                <exclude name="phingyii2/ext" />
                <exclude name="phingyii2/ext/*" />
                <exclude name="phingyii2/ext/**" />
                <exclude name="phingyii2/ext/*/*" />
                <exclude name="phingyii2/ext/**/**" />
                <exclude name="phingyii2/build.properties" />
                <exclude name="vendor" />
                <exclude name="composer.json" />
                <exclude name="composer.lock" />
            </fileset>
        </delete>
        
        <mkdir dir="./tmp" />
        <chmod file="${basedir}/tmp" mode="777"/>
        
    </target>
    
    <!--autoloader autoloaderpath="vendor/autoload.php"/-->
    
    <target name="composer" description="Installing dependencies with composer" depends="prepare" >
        <echo msg="Installing dependencies with composer" />
        
        <composer command="global" composer="${composer}">
            <arg value="require" />
            <arg value="fxp/composer-asset-plugin:~1.1.1"/>
        </composer>
        <echo msg="Composer : global require fxp/composer-asset-plugin:~1.1.1" />
        
        <composer command="create-project" composer="${composer}">
            <arg value="--prefer-dist" />
	    <arg value="yiisoft/yii2-app-${yii2.template}" />
            <arg path="${tmp}" />
        </composer>
	<echo msg="Composer : create-project --prefer-dist yiisoft/yii2-app-${yii2.template} ${basedir}" />
        
       
       	<if>
		<equals arg1="basic" arg2="${yii2.template}" />
		<then>
			<move file="${tmp}/LICENSE.md" tofile="${basedir}/LICENSE.md" overwrite="true"/>
			<move file="${tmp}/README.md" tofile="${basedir}/README.md" overwrite="true"/>
			<move file="${tmp}/assets" tofile="${basedir}/assets" overwrite="true"/>
			<move file="${tmp}/commands" tofile="${basedir}/commands" overwrite="true"/>
			<move file="${tmp}/composer.json" tofile="${basedir}/composer.json" overwrite="true"/>
			<move file="${tmp}/config" tofile="${basedir}/config" overwrite="true"/>
			<move file="${tmp}/controllers" tofile="${basedir}/controllers" overwrite="true"/>
			<move file="${tmp}/mail" tofile="${basedir}/mail" overwrite="true"/>
			<move file="${tmp}/models" tofile="${basedir}/models" overwrite="true"/>
			<move file="${tmp}/requirements.php" tofile="${basedir}/requirements.php" overwrite="true"/>
			<move file="${tmp}/runtime" tofile="${basedir}/runtime" overwrite="true"/>
			<move file="${tmp}/tests" tofile="${basedir}/tests" overwrite="true"/>
			<move file="${tmp}/views" tofile="${basedir}/views" overwrite="true"/>
			<move file="${tmp}/web" tofile="${basedir}/web" overwrite="true"/>
			<move file="${tmp}/yii" tofile="${basedir}/yii" overwrite="true"/>
			<move file="${tmp}/yii.bat" tofile="${basedir}/yii.bat" overwrite="true"/>

		</then>
	<else>
        	<move file="${tmp}/backend" tofile="${basedir}/backend" overwrite="true"/>
        	<move file="${tmp}/frontend" tofile="${basedir}/frontend" overwrite="true"/>
        	<move file="${tmp}/common" tofile="${basedir}/common" overwrite="true"/>
        	<move file="${tmp}/console" tofile="${basedir}/console" overwrite="true"/>
        	<move file="${tmp}/tests" tofile="${basedir}/tests" overwrite="true"/>
        	<move file="${tmp}/environments" tofile="${basedir}/environments" overwrite="true"/>
        	<move file="${tmp}/vendor" tofile="${basedir}/vendor" overwrite="true"/>
        	<move file="${tmp}/init" tofile="${basedir}/init" overwrite="true"/>
        	<move file="${tmp}/composer.json" tofile="${basedir}/composer.json" overwrite="true"/>
        	<move file="${tmp}/composer.lock" tofile="${basedir}/composer.lock" overwrite="true"/>
        	<move file="${tmp}/init.bat" tofile="${basedir}/init.bat" overwrite="true"/>
        	<move file="${tmp}/yii.bat" tofile="${basedir}/yii.bat" overwrite="true"/>
        	<move file="${tmp}/LICENSE.md" tofile="${basedir}/LICENSE.md" overwrite="true"/>
        	<move file="${tmp}/README.md" tofile="${basedir}/README.md" overwrite="true"/>
		<move file="${tmp}/requirements.php" tofile="${basedir}/requirements.php" overwrite="true"/>
	</else>
	</if>

         <composer command="require" composer="${composer}">
            <arg value="phing/phing:2.*@dev"></arg>
        </composer>
    </target>
    
    <target name="init">
        <echo>/opt/local/bin/php ${tmp}/init --env=${yii2.env} --overwrite=n</echo>
        <exec command="${php} init --env=${yii2.env} --overwrite=n" dir="${basedir}/" />
    </target>
    
    <target name="db">
	    <chmod file="${runtime}" mode="777" />
	    	    

	<if>
		<equals arg1="basic" arg2="${yii2.template}" />
		<then>
			<echo>template: basic</echo>
			<chmod file="${basedir}/assets" mode="777" />
			<chmod file="${basedir}/web" mode="777" />
			<chmod file="${basedir}/web/assets" mode="777" />

			<echo>Copy ${basedir}/config/db.php to ${runtime}/config/db.php.dist</echo>
			<copy file="${basedir}/config/db.php"
				tofile="${runtime}/config/db.php.dist" overwrite="true" />

			<copy file="${runtime}/config/db.php.dist" tofile="${basedir}/config/db.php" overwrite="true">
            			<filterchain>
                			<replacetokens begintoken="mysql:host=" endtoken=";dbname">
                			    <token key="localhost" value="mysql:host=${yii2.basic.db.host};dbname"/>
                			</replacetokens>
                			<replacetokens begintoken="dbname=" endtoken="',">
                			    <token key="yii2basic" value="dbname=${yii2.basic.db.database}',"/>
                			</replacetokens>
                			<replacetokens begintoken="'username' => '" endtoken="',">
                			    <token key="root" value="'username' => '${yii2.basic.db.user}'," />
                			</replacetokens>
                			<replaceregexp>
                			    <regexp pattern="'password' => ''," replace="'password' => '${yii2.basic.db.pwd}'," />
                			</replaceregexp>
            			</filterchain>
        		</copy>
			<echo>Replace content db in ${build}/config/db.php</echo>
		</then>
		<else>
			<echo>template: advanced</echo>
			<phingcall target="advanced"></phingcall>
		</else>
	</if>
	</target>

	<target name="advanced">
		<if>
			<equals arg1="true" arg2="${yii2.advanced.db.common}" />
			<then>
				<phingcall target="advanced_common"></phingcall>
			</then>
			<else>
				<phingcall target="advanced_backend"></phingcall>
				<phingcall target="advanced_fronted"></phingcall>
			</else>

		</if>
	</target>

	<target name="advanced_common">
		<echo>Copy ${basedir}/common/config/main-local.php to ${runtime}/common/config/main-local.php.dist</echo>
        
        		<copy file="${basedir}/common/config/main-local.php"
                	tofile="${runtime}/common/config/main-local.php.dist" overwrite="true" />
        
        		<copy file="${runtime}/common/config/main-local.php.dist" tofile="${basedir}/common/config/main-local.php" overwrite="true">
            			<filterchain>
                			<replacetokens begintoken="mysql:host=" endtoken=";dbname">
                			    <token key="localhost" value="mysql:host=${yii2.advanced.db.common.host};dbname"/>
                			</replacetokens>
                			<replacetokens begintoken="dbname=" endtoken="',">
                			    <token key="yii2advanced" value="dbname=${yii2.advanced.db.common.database}',"/>
                			</replacetokens>
                			<replacetokens begintoken="'username' => '" endtoken="',">
                			    <token key="root" value="'username' => '${yii2.advanced.db.common.user}'," />
                			</replacetokens>
                			<replaceregexp>
                			    <regexp pattern="'password' => ''," replace="'password' => '${yii2.advanced.db.common.pwd}'," />
                			</replaceregexp>
            			</filterchain>
        		</copy>
        
			<echo>Replace content db in ${build}/common/config/main-local.php</echo>

		</target>

		<target name="advanced_backend">
			<echo>Copy ${basedir}/backend/config/main-local.php to ${runtime}/backend/config/main-local.php.dist</echo>

			<copy file="${basedir}/backend/config/main-local.php"
                	tofile="${runtime}/backend/config/main-local.php.dist" overwrite="true" />
        
        		<copy file="${runtime}/backend/config/main-local.php.dist" tofile="${basedir}/backend/config/main-local.php" overwrite="true">
            			<filterchain>
                			<replacetokens begintoken="mysql:host=" endtoken=";dbname">
                			    <token key="localhost" value="mysql:host=${yii2.advanced.db.backend.host};dbname"/>
                			</replacetokens>
                			<replacetokens begintoken="dbname=" endtoken="',">
                			    <token key="yii2advanced" value="dbname=${yii2.advanced.db.backend.database}',"/>
                			</replacetokens>
                			<replacetokens begintoken="'username' => '" endtoken="',">
                			    <token key="root" value="'username' => '${yii2.advanced.db.backend.user}'," />
                			</replacetokens>
                			<replaceregexp>
                			    <regexp pattern="'password' => ''," replace="'password' => '${yii2.advanced.db.backend.pwd}'," />
                			</replaceregexp>
            			</filterchain>
        		</copy>
        
			<echo>Replace content db in ${build}/backend/config/main-local.php</echo>
		</target>

		<target name="advanced_fronted">
			<echo>Copy ${basedir}/frontend/config/main-local.php to ${runtime}/frontend/config/main-local.php.dist</echo>
			<copy file="${basedir}/frontend/config/main-local.php"
                	tofile="${runtime}/frontend/config/main-local.php.dist" overwrite="true" />
        
        		<copy file="${runtime}/frontend/config/main-local.php.dist" tofile="${basedir}/frontend/config/main-local.php" overwrite="true">
            			<filterchain>
                			<replacetokens begintoken="mysql:host=" endtoken=";dbname">
                			    <token key="localhost" value="mysql:host=${yii2.advanced.db.frontend.host};dbname"/>
                			</replacetokens>
                			<replacetokens begintoken="dbname=" endtoken="',">
                			    <token key="yii2advanced" value="dbname=${yii2.advanced.db.frontend.database}',"/>
                			</replacetokens>
                			<replacetokens begintoken="'username' => '" endtoken="',">
                			    <token key="root" value="'username' => '${yii2.advanced.db.frontend.user}'," />
                			</replacetokens>
                			<replaceregexp>
                			    <regexp pattern="'password' => ''," replace="'password' => '${yii2.advanced.db.frontend.pwd}'," />
                			</replaceregexp>
            			</filterchain>
        		</copy>
        
			<echo>Replace content db in ${build}/frontend/config/main-local.php</echo>
		</target>



    <target name="migration">
		<if>
			<equals arg1="basic" arg2="${yii2.template}" />
			<then>
				<exec command="${php} yii migrate --db=${yii2.basic.db.database} --interactive=0" dir="${basedir}/" />
			</then>
		<else>
			<phingcall target="advanced_migration"></phingcall>
		</else>
		</if>
	       </target>

    <target name="advanced_migration">
    	<if>
			<equals arg1="true" arg2="${yii2.advanced.db.common}" />
			<then>
				 <exec command="${php} yii migrate --db=${yii2.advanced.db.common.database}' --interactive=0" dir="${basedir}/" />
			</then>
			<else>
				<exec command="${php} yii migrate --db=${yii2.advanced.db.backend.database}' --interactive=0" dir="${basedir}/" />
				<exec command="${php} yii migrate --db=${yii2.advanced.db.frontend.database}' --interactive=0" dir="${basedir}/" />
			</else>

		</if>
    </target>

    <!--autoloader autoloaderpath="vendor/autoload.php"/-->
    
    <target name="composer-update">
        
        <echo>composer update</echo>
        <composer command="update" composer="${composer}" />
        
    </target>
    
 
    
    <target name="clean">
        <delete dir="tmp" includeemptydirs="true" failonerror="false" verbose="true"></delete>
    </target>
    
    <target name="build" depends="prepare, composer, init, db, composer-update, migration, ext, clean">
        <echo>prepare, composer, init, db, composer-update, migration, ext, clean</echo>
        <echo>prepare...........finish</echo>
        <echo>composer..........finish</echo>
        <echo>init..............finish</echo>
        <echo>db................finish</echo>
        <echo>composer update...finish</echo>
        <echo>migration.........finish</echo>
        <echo>clean.............finish</echo>
    </target>
    
</project>
